/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QueryBuilderPane.java
 *
 * Created on 2012-5-15, 17:59:11
 */
package datatransfer.gui;

import java.awt.Cursor;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;

import javax.swing.JOptionPane;

import nickyb.sqleonardo.querybuilder.QueryModel;

import org.executequery.GUIUtilities;
import org.executequery.repository.DatabaseConnectionRepository;
import org.executequery.repository.RepositoryCache;

import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import datatransfer.config.ConfigIO;
import datatransfer.config.DataTransferConfig;
import datatransfer.config.TransferQuery;

/**
 * 
 * @author Administrator
 */
public class QueryBuilderPane extends javax.swing.JPanel {
	
	private  Connection connection;
	public static final String TITLE = "模型转换器";
	public static final String FRAME_ICON = "transforms.gif";


	/** Creates new form QueryBuilderPane */
	public QueryBuilderPane(Connection connection) {
		initComponents();

	}

	

	public QueryBuilderPane() {
		initComponents();

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		GUIUtilities.getParentFrame().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
		cmSaveQuery = new pl.mpak.sky.gui.swing.Action();
		cmNewQuery = new pl.mpak.sky.gui.swing.Action();
		cmLoadQuery = new pl.mpak.sky.gui.swing.Action();
		cmCheckQuery= new pl.mpak.sky.gui.swing.Action();
		jPanel1 = new javax.swing.JPanel();
		jToolBar1 = new javax.swing.JToolBar();
		toolButton1 = new pl.mpak.sky.gui.swing.comp.ToolButton();
		toolButton2 = new pl.mpak.sky.gui.swing.comp.ToolButton();
		toolButton3 = new pl.mpak.sky.gui.swing.comp.ToolButton();
		toolButton4 = new pl.mpak.sky.gui.swing.comp.ToolButton();
		builder = new nickyb.sqleonardo.querybuilder.QueryBuilder(((DatabaseConnectionRepository)RepositoryCache.load(
                DatabaseConnectionRepository.REPOSITORY_ID)).findAll());

		cmSaveQuery.setActionCommandKey("cmSaveQuery"); // NOI18N
		cmSaveQuery.setSmallIcon(new javax.swing.ImageIcon(getClass()
				.getResource("/images/disk.png"))); // NOI18N
		cmSaveQuery.setText("添加至当前配置文件"); // NOI18N
		cmSaveQuery.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmSaveQueryActionPerformed(evt);
			}
		});
		
		
		cmCheckQuery.setActionCommandKey("cmCheckQuery"); // NOI18N
		cmCheckQuery.setSmallIcon(new javax.swing.ImageIcon(getClass()
				.getResource("/pl/mpak/res/icons/check.gif"))); // NOI18N
		cmCheckQuery.setText("检查"); // NOI18N
		cmCheckQuery.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmCheckQueryActionPerformed(evt);
			}
		});
 
		cmNewQuery.setActionCommandKey("cmNewQuery"); // NOI18N
		cmNewQuery.setSmallIcon(new javax.swing.ImageIcon(getClass()
				.getResource("/pl/mpak/res/icons/new_document16.gif"))); // NOI18N
		cmNewQuery.setText("清除内容"); // NOI18N
		cmNewQuery.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmNewQueryActionPerformed(evt);
			}
		});

		cmLoadQuery.setActionCommandKey("cmLoadQuery"); // NOI18N
		cmLoadQuery.setSmallIcon(new javax.swing.ImageIcon(getClass()
				.getResource("/images/table_gear.png"))); // NOI18N
		cmLoadQuery.setText("查看所有查询"); // NOI18N
		cmLoadQuery.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmLoadQueryActionPerformed(evt);
			}
		});

		setName("Form"); // NOI18N
		setLayout(new java.awt.BorderLayout());

		jPanel1.setName("jPanel1"); // NOI18N

		jToolBar1.setBorder(null);
		jToolBar1.setRollover(true);
		jToolBar1.setName("jToolBar1"); // NOI18N

		toolButton1.setAction(cmSaveQuery);
		toolButton1
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		toolButton1.setName("toolButton1"); // NOI18N
		toolButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		jToolBar1.add(toolButton1);

		toolButton3.setAction(cmNewQuery);
		toolButton3
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		toolButton3.setName("toolButton3"); // NOI18N
		toolButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		jToolBar1.add(toolButton3);
		
		toolButton2.setAction(cmCheckQuery);
		toolButton2
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		toolButton2.setName("toolButton1"); // NOI18N
		toolButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		jToolBar1.add(toolButton2);
		 

		toolButton4.setAction(cmLoadQuery);
		toolButton4
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		toolButton4.setName("toolButton4"); // NOI18N
		toolButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		jToolBar1.add(toolButton4);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel1Layout
						.createSequentialGroup()
						.addComponent(jToolBar1,
								javax.swing.GroupLayout.PREFERRED_SIZE, 100,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(494, Short.MAX_VALUE)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25,
				javax.swing.GroupLayout.PREFERRED_SIZE));

		add(jPanel1, java.awt.BorderLayout.PAGE_START);

		builder.setName("builder"); // NOI18N
		add(builder, java.awt.BorderLayout.CENTER);
		GUIUtilities.getParentFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));   
	}// </editor-fold>//GEN-END:initComponents

	
	
	private void cmSaveQueryActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmSaveQueryActionPerformed
	// TODO add your handling code here:
		DataTransferConfig dtc=RepositoryCache.getCurrentConfig();
		String destId=builder.getDestTablePane().getDestId();
		System.out.println("读入：builder  destId"+destId);
		if(builder.getTransferQuery().getIsAliasValid()==null)
			builder.checkTransferQuery();
		if(builder.getTransferQuery().getIsAliasValid()==false)
		{
			int response = JOptionPane.showConfirmDialog(this, "输出字段对应检查未通过，是否继续","提示", JOptionPane.YES_NO_OPTION);
			if (response == 1)
				return;
		}
		if(null!=dtc.getDestId()&&!dtc.getDestId().equals(destId))
		{
			int response1 = JOptionPane.showConfirmDialog(this, "您改变了目标库选择，确认？","提示", JOptionPane.YES_NO_OPTION);
			if (response1 == 1)  
				return;
			 
		}	 
		dtc.setDestId(destId);
		 if (dtc.getTransferQuerysMap().get(builder.getTransferQuery().getDestinationTable()) != null) 
				{
					int response1 = JOptionPane.showConfirmDialog(this, "已存在该配置，是否覆盖","提示", JOptionPane.YES_NO_OPTION);
					if (response1 == 1) 
						return;
				 
						
				}
		 
	    dtc.getTransferQuerysMap().put(builder.getTransferQuery().getDestinationTable(),builder.getTransferQuery());
			writeConfig(dtc);

	}// GEN-LAST:event_cmSaveQueryActionPerformed

	private void writeConfig(DataTransferConfig dtc)
	{
		File file = new File(dtc.getConfigFile());
        ConfigIO cio = new ConfigIO();
        FileWriter outputWriter = null;
        try {
        //    if (file.exists()) {
              //  if (MessageBox.show(this, "提示", "配置文件已存在，要覆盖它么？", ModalResult.YESNO, MessageBox.QUESTION) != ModalResult.YES)
             //       return;
        //    } 
       // else {
                File dir = file.getParentFile();
                boolean dirOk = true;
                if(!dir.exists()){                    
                    dirOk = dir.mkdirs();
                }
                if(dirOk){
                    file.createNewFile();
                }else{
                    MessageBox.show("提示", "保存配置文件失败，不能创建所在目录");
                    return;
                }
         //   }            
            outputWriter = new FileWriter(file);
            cio.write(dtc, outputWriter);
            MessageBox.show("提示", "配置文件已保存："+file.getAbsolutePath());
            dtc.setChangedAndUnsaved(false);
        } catch (Exception ex) {
            MessageBox.show("提示", "保存配置文件失败:"+ex.getMessage());
        } finally{
            if(outputWriter!=null){
                try {
                    outputWriter.close();
                } catch (IOException ex) {
                 //   logger.error(ex);
                }
            }
           }
	}
	
	
	private void cmCheckQueryActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmLunchQueryActionPerformed
	// TODO add your handling code here:
   
	
	 JOptionPane.showMessageDialog(this, builder.checkTransferQuery());
	
	}// GEN-LAST:event_cmLunchQueryActionPerformed
	private String checkQuery()
	{
		 return "";
	}
	
	
	private void cmNewQueryActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmLunchQueryActionPerformed

		builder.setQueryModel(new QueryModel());
		builder.setTransferQuery(new TransferQuery());

	}

	private void cmLoadQueryActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmLunchQueryActionPerformed

		String queryName = SelectTranferQueryDialog.showDialog();
		if (queryName.length() > 0) {
			TransferQuery ts = RepositoryCache.getCurrentConfig()
					.getTransferQuerysMap().get(queryName);
			this.builder.loadQuery1(ts);
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private nickyb.sqleonardo.querybuilder.QueryBuilder builder;
	private pl.mpak.sky.gui.swing.Action cmLunchQuery;
	private pl.mpak.sky.gui.swing.Action cmLoadQuery;
	private pl.mpak.sky.gui.swing.Action cmCheckQuery;
	private pl.mpak.sky.gui.swing.Action cmSaveQuery;
	private pl.mpak.sky.gui.swing.Action cmNewQuery;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JToolBar jToolBar1;
	private pl.mpak.sky.gui.swing.comp.ToolButton toolButton1;
	private pl.mpak.sky.gui.swing.comp.ToolButton toolButton2;
	private pl.mpak.sky.gui.swing.comp.ToolButton toolButton3;
	private pl.mpak.sky.gui.swing.comp.ToolButton toolButton4;
	// End of variables declaration//GEN-END:variables
}
