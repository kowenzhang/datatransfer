/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelM.java
 *
 * Created on 2011-11-28, 18:09:02
 */
package datatransfer.gui.extract;

import datatransfer.Output;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ddlutils.model.Database;
import org.apache.ddlutils.model.Table;
import org.executequery.databasemediators.DatabaseConnection;
import org.executequery.datasource.ConnectionManager;

import pl.mpak.util.StringUtil;
import datatransfer.config.DataTransferConfig;
import datatransfer.extract.DataExtractTask;
import datatransfer.extract.SourceModelPacker;
import pl.mpak.sky.gui.swing.MessageBox;  

/**
 * 
 * @author kowen
 */
public class ExtractPanel extends javax.swing.JPanel {

    private List<SourceExtractPanel> sepList = new ArrayList<SourceExtractPanel>();
    private SourceModelPacker sourceModelPacker;
    private Output output;
    private DataTransferConfig dataTransferConfig;
    private TransferPanel transferPanel;

    /** Creates new form PanelM */
    public ExtractPanel() {
        initComponents();
    }

    public void init() {
        Map<String, Map<String, String>> conditions = getSourceModelPacker().getConditions();
        DatabaseConnection destination = getDataTransferConfig().getDestination();

        Map<String, List<DataExtractTask>> taskListMap = new HashMap<String, List<DataExtractTask>>();

        Database toDatabase = ConnectionManager.getDataBase(destination);//
        for (DatabaseConnection dc : getDataTransferConfig().getDatabaseConnections()) {
            if (dc != destination) {
                List<DataExtractTask> taskList = new ArrayList<DataExtractTask>();
//                    Database database= ConnectionManager.getDataBase(dc);
                Database database = getSourceModelPacker().getPackedModelBySource(dc.getName());
                if (null != database) {
                    for (Table table : database.getTables()) {
                        String whereCondition = null;
                        Map<String, String> temp = conditions.get(dc.getName());
                        if (null != temp) {
                            whereCondition = temp.get(table.getName());
                        }
                        DataExtractTask task = new DataExtractTask(dc, destination, database, toDatabase, table, whereCondition);
                        taskList.add(task);
                    }
                }
                taskListMap.put(dc.getName(), taskList);
                SourceExtractPanel sep = new SourceExtractPanel(taskList);
                sep.setExtractPanel(this);
                sepList.add(sep);
                tab.add(dc.getName(), sep);

            }
        }

        setThreadNum();
        setBufferSize();
    }

    public void setThreadNum() {
        if (StringUtil.isInteger(txtThreadNum.getText())) {
            for (SourceExtractPanel sep : sepList) {
                sep.setThreadNum(Integer.parseInt(txtThreadNum.getText()));
            }
        }
    }

    public void setBufferSize() {
        if (StringUtil.isInteger(txtBuffer.getText())) {
            for (SourceExtractPanel sep : sepList) {
                sep.setBufferSize(Integer.parseInt(txtBuffer.getText()));
            }
        }
    }

    /**
     * 是否存在正在运行的抽取任务
     * @return 
     */
    public boolean hasRunningExtractTask() {
        for (SourceExtractPanel sep : sepList) {
            if (sep.hasRunning()) {
                return true;
            }
        }
        return false;
    }

    /**
     * 如果全部完成并勾选自动启动，则立即启动insert执行
     */
    public void checkAllFinishAndStartExecute() {
        if (chkExecute.isSelected()) {
            for (SourceExtractPanel sep : this.sepList) {
                if (!sep.isFinished()) {
                    return;
                }
            }
            output.prompt("抽取完成，开始生成目标表数据");
            this.getTransferPanel().getExecuteInserPanel().start();
        }
    }
    
    /**
     * 是否可以执行所有抽取任务
     * @return 
     */
    public boolean canAllSepStart() {
        for (SourceExtractPanel sep : sepList) {
            if (!sep.canStart()) {
                return false;
            }
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmExtractAll = new pl.mpak.sky.gui.swing.Action();
        cmSetParams = new pl.mpak.sky.gui.swing.Action();
        pnlControl = new javax.swing.JPanel();
        txtBuffer = new javax.swing.JTextField();
        txtThreadNum = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnSet = new javax.swing.JButton();
        btnExtractAll = new javax.swing.JButton();
        chkExecute = new javax.swing.JCheckBox();
        tab = new javax.swing.JTabbedPane();

        cmExtractAll.setText("全部抽取"); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(ExtractPanel.class);
        cmExtractAll.setTooltip(resourceMap.getString("cmExtractAll.tooltip")); // NOI18N
        cmExtractAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmExtractAllActionPerformed(evt);
            }
        });

        cmSetParams.setText("设置"); // NOI18N
        cmSetParams.setTooltip(resourceMap.getString("cmSetParams.tooltip")); // NOI18N
        cmSetParams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmSetParamsActionPerformed(evt);
            }
        });

        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(800, 500));
        setLayout(new java.awt.BorderLayout());

        pnlControl.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlControl.setName("pnlControl"); // NOI18N
        pnlControl.setPreferredSize(new java.awt.Dimension(500, 40));

        txtBuffer.setText("3000"); // NOI18N
        txtBuffer.setName("txtBuffer"); // NOI18N

        txtThreadNum.setText("5"); // NOI18N
        txtThreadNum.setName("txtThreadNum"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        btnSet.setAction(cmSetParams);
        btnSet.setToolTipText(""); // NOI18N
        btnSet.setName("btnSet"); // NOI18N

        btnExtractAll.setAction(cmExtractAll);
        btnExtractAll.setToolTipText("从原始库抽取数据到目标库临时表"); // NOI18N
        btnExtractAll.setName("btnExtractAll"); // NOI18N

        chkExecute.setText("抽取完成立即启动生成目标表数据"); // NOI18N
        chkExecute.setActionCommand(""); // NOI18N
        chkExecute.setName("chkExecute"); // NOI18N

        javax.swing.GroupLayout pnlControlLayout = new javax.swing.GroupLayout(pnlControl);
        pnlControl.setLayout(pnlControlLayout);
        pnlControlLayout.setHorizontalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtThreadNum, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBuffer, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExtractAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkExecute)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        pnlControlLayout.setVerticalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuffer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtThreadNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnSet)
                    .addComponent(btnExtractAll)
                    .addComponent(chkExecute))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(pnlControl, java.awt.BorderLayout.NORTH);

        tab.setMinimumSize(new java.awt.Dimension(500, 200));
        tab.setName("tab"); // NOI18N
        tab.setPreferredSize(new java.awt.Dimension(500, 200));
        add(tab, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cmSetParamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmSetParamsActionPerformed
        this.setBufferSize();
        this.setThreadNum();
    }//GEN-LAST:event_cmSetParamsActionPerformed

    private void cmExtractAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmExtractAllActionPerformed
        if (canAllSepStart()) {
            getOutput().prompt("开始所有抽取任务，详细状态请在标签页中查看...");
            for (SourceExtractPanel sep : sepList) {
                sep.start();
            }
        } else {
            MessageBox.show("提示", "部分抽取任务未处于就绪状态，请检查后再进行全部抽取");
        }
    }//GEN-LAST:event_cmExtractAllActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExtractAll;
    private javax.swing.JButton btnSet;
    private javax.swing.JCheckBox chkExecute;
    private pl.mpak.sky.gui.swing.Action cmExtractAll;
    private pl.mpak.sky.gui.swing.Action cmSetParams;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel pnlControl;
    private javax.swing.JTabbedPane tab;
    private javax.swing.JTextField txtBuffer;
    private javax.swing.JTextField txtThreadNum;
    // End of variables declaration//GEN-END:variables

    public void prompt(String msg) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * @return the output
     */
    public Output getOutput() {
        return output;
    }

    /**
     * @param output the output to set
     */
    public void setOutput(Output output) {
        this.output = output;
    }

    /**
     * @return the dataTransferConfig
     */
    public DataTransferConfig getDataTransferConfig() {
        return dataTransferConfig;
    }

    /**
     * @param dataTransferConfig the dataTransferConfig to set
     */
    public void setDataTransferConfig(DataTransferConfig dataTransferConfig) {
        this.dataTransferConfig = dataTransferConfig;
    }

    /**
     * @return the transferPanel
     */
    public TransferPanel getTransferPanel() {
        return transferPanel;
    }

    /**
     * @param transferPanel the transferPanel to set
     */
    public void setTransferPanel(TransferPanel transferPanel) {
        this.transferPanel = transferPanel;
    }

    /**
     * @return the sourceModelPacker
     */
    public SourceModelPacker getSourceModelPacker() {
        return sourceModelPacker;
    }

    /**
     * @param sourceModelPacker the sourceModelPacker to set
     */
    public void setSourceModelPacker(SourceModelPacker sourceModelPacker) {
        this.sourceModelPacker = sourceModelPacker;
    }
}
